/**
  * addExecRight v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{readdirSync as e,statSync as t}from"node:fs";import{exec as i,execOpts as a}from"@ymc/run-bash";import{baseParam as n}from"@ymc/cli-preset-param";import{getBuiltinConfig as o,getCliFlags as r}from"@ymc/cli-param";import l from"@ymc/promise-all";const{log:m}=console;function c(){return[...n(),{name:"-p,--bin-path",type:"string",value:"bin",desc:"the location of bin path"},{name:"--ext",type:"string",value:".js,.sh",desc:"only for matched file extention"},{name:"--update-by-git",type:"boolean",value:!1,desc:"run git update-index --chmod=+x xx or not"},{name:"--check-git",type:"boolean",value:!1,desc:"check if git init"},{name:"--verbose",type:"boolean",value:!1,desc:"info file right info or not"},{name:"--file-head",type:"string",value:"",desc:"add file head, custom file head"}]}async function s(n={}){const s={...o(c()),...r(n)},p=s.binPath;let f=e(p).map((e=>`${p}/${e}`)).filter((e=>t(e).isFile()));if(s.ext){const{ext:e}=s,t=e.split(",").map((e=>new RegExp(`${e}$`)));f=f.filter((e=>t.some((t=>t.test(e)))))}let d,u;d=f.map((e=>{return t={...s,file:e},async()=>{let e,n=`chmod +x ${t.file}`;return m(`[info] run: ${n}`),e=await i(n,a),t.updateByGit&&(n=`git update-index --chmod=+x ${t.file}`,m(`[info] run: ${n}`),e=await i(n,a)),e};var t})),await l(d,3),s.verbose||(u=await i(`ls ${p} -l`,a),m(u))}export{s as main,c as param};
