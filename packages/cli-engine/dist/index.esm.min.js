/**
  * cliEngine v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{CliOptionHelp as t}from"@ymc/cli-option";import{camelizeFlags as r,getCliFlags as n}from"@ymc/cli-param";import s from"@ymc/nano-parse";import{YcsRunner as i}from"@ymc/cli-runner";import{defEntry as o}from"@ymc/cli-entry";class e{constructor(){this.init()}init(){return this.too=new t,this.data={},this.ycs=new i,this.ycs.nanoparse(s),this}param(t){const{too:r}=this;return r.param(t),this}usage(...t){const{too:r,data:n}=this;return n.usage=r.usage(...t),this}option(t,r,n){const{too:s,data:i}=this;return i.option=s.updateEntryOption(t,r,n),this}entry(t,r={}){const{data:n,ycs:s}=this;return n.entry=o(t,{...{usage:n.usage,option:n.option,...r}}),this}run(){const{data:t,ycs:r}=this;r.entry(t.entry),r.run(process.argv)}new(){return new e}camelizeFlags(t={},n={}){return r(t,n)}getBuiltinFlags(...t){const{too:r}=this;return r.getBuiltinConfig(...t)}getCurrentFlags(...t){let r;return r={...this.getBuiltinFlags(),...this.getCliFlags(t[0],t[1])},r=this.camelizeFlags(r,t[1]),r}getCliFlags(t,r={}){const{data:s}=this,i=s.entry;return n(t,{...r,entrys:i})}}const a=new e;export{a as ycs};
