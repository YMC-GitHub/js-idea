/**
  * genPkgChangelog v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
"use strict";require("node:child_process");var e=require("node:fs");
/**
  * renderTpl v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */function t(e,t){let n=e;return Object.keys(t).forEach((e=>{const i=t[e];n=n.replace(new RegExp(`{${e}}`,"ig"),i)})),n}class n{constructor(){this.init()}init(){return this.option={},this.data=[],this.result="",this.plugin=[],this}writeTpl(e,n){return function(e,n){return n?t(e,n):n=>t(e,n)}
/**
  * changlogStyle v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */(e,n)}render(){const e=this,{option:t}=this;switch(t.style.toLowerCase()){case"list":return(e=>{const{data:t,option:n}=e,i=t.map(((t,n)=>e.writeTpl("- {commit} {subject}",t))).join("\n");let s="";const o=t;return o.length>0&&(s=e.writeTpl('<a name="{version}"></a>\n# {version}({date})\n### {libname}\n{changes}',{date:o[0].date,changes:i}),e.result=s),s})(e);case"table":return(e=>{const{data:t,option:n}=e;let i;i=t.map((t=>{const n={...t};let{issue:i}=n;return i&&i.length>0?(i=i.filter((e=>e)),n.issue=i.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):n.issue="",n})),i=i.map(((t,n)=>{const i={...t},{issue:s}=i;return s.length>0?i.subject=e.writeTpl("{subject}({issue})",i):i.subject=e.writeTpl("{subject}",i),i})),i=i.map(((t,n)=>{const i={...t};return i.commit=e.writeTpl("[{commit}]({repo}/commit/{hash})",{...i}),i}));const s=i.map((t=>e.writeTpl("{commit}|{type}|{subject}",t))).join("\n"),o=function(e,t="l"){let n="";const i=e,s=i.split("|").map((()=>{let e="";switch(t){case"m":case"center":e=":----:";break;case"r":case"right":e="----:";break;default:e=":----"}return e})).join("|");return n=`${i}\n${s}`,n}("commit|type|desciption","l"),r=`${o}\n${s}\n\n`;let a="";return i.length>0&&(a=e.writeTpl('<a name="{version}"></a>\n# {version}({date})\n### {libname}\n{changes}',{date:i[0].date,changes:r}),e.result=a),a})(e)}const{plugin:n}=this;for(let t=0;t<n.length;t+=1){(0,n[t])(e)}return this.result}}
/**
  * streamIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
function i(e){return new Promise(((t,n)=>{let i="";e.on("data",(e=>{i+=e.toString()})).on("end",(()=>{t(i)})).on("error",n)}))}function s({stream:e,data:t}){return new Promise(((n,i)=>{e.write(t,"utf-8"),e.end(),e.on("finish",(()=>{n(t)})).on("error",i)}))}
/**
  * textStreamIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */(new n).plugin=[e=>{const{data:t,option:n}=e;let i;i=t.map((t=>{const n={...t};let{issue:i}=n;return i&&i.length>0?(i=i.filter((e=>e)),n.issue=i.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):n.issue="",n})),i=i.map(((t,n)=>{const i={...t},{issue:s}=i;return s.length>0?i.subject=e.writeTpl("{subject}({issue})",i):i.subject=e.writeTpl("{subject}",i),i})),i=i.map(((t,n)=>{const i={...t};return i.commit=e.writeTpl("[{commit}]({repo}/commit/{hash})",{...i}),i}));const s=i.map((t=>e.writeTpl("{commit}|{type}|{subject}",t))).join("\n"),o=function(e,t="l"){let n="";const i=e,s=i.split("|").map((()=>{let e="";switch(t){case"m":case"center":e=":----:";break;case"r":case"right":e="----:";break;default:e=":----"}return e})).join("|");return n=`${i}\n${s}`,n}("commit|type|desciption","l"),r=`${o}\n${s}\n\n`;let a="";return i.length>0&&(a=e.writeTpl('<a name="{version}"></a>\n# {version}({date})\n### {libname}\n{changes}',{date:i[0].date,changes:r}),e.result=a),a}];class o{constructor(e="CHANGELO.md"){this.init(e)}async read(t=""){const{file:n}=this;let s,o;try{s=e.createReadStream(n.name),o=await i(s)}catch(e){o=t}return n.data=o,o}async write(t){const{file:n,option:i}=this;let o,r,a;switch(o=e.createWriteStream(n.name),r=n.data,i.writemode){case"override":default:a=`${t}`;break;case"append":a=`${r}\n${t}`;break;case"head":a=`${t}\n${r}`}n.data=a,await s({stream:o,data:a})}init(e="CHANGELO.md",t=""){return this.file={name:e,data:t},this.option={},this}new(...e){return new o(...e)}}new o;const r=new
/**
  * changlogFileIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
class extends o{constructor(e="CHANGELO.md"){super(),this.init(e)}getLastCommitLabel(e=/\[[0-9a-z]{9}\]/gi,t=/^\[|\]$/gi){const{file:n}=this,i=n.data.match(e);let s="";return i&&([s]=i),s=s.replace(t,""),s}init(e="CHANGELO.md"){this.file={name:e,data:""},this.option={}}};
/**
  * extendString v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
/**
  * jsonStreamIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
class a{constructor(e,t){this.init(e,t)}async read(t={}){const{file:n}=this;let s,o;try{s=e.createReadStream(n.name),o=await i(s),o=JSON.parse(o)}catch(e){o=t}return n.data=o,o}async write(t){const{file:n,option:i}=this;let o,r=t;try{o=e.createWriteStream(n.name),t?n.data=t:r=n.data,await s({stream:o,data:JSON.stringify(r,null,2)})}catch(e){}}init(e="package.json",t={}){this.file={name:e,data:t},this.option={}}new(...e){return new a(...e)}}const c=new a;
/**
  * mockPath v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */function l(e){const t=l.sep?l.sep:"/",n=e.split(/\/?\\|\//);return n.slice(0,n.length-1).join(t)}const{log:u}=console;function p(e,t={}){let n=function(e,t){const n=e.split(/\/?\\|\//),i=n[n.length-1];return t?i.replace(new RegExp(`${t}$`),""):i}(e);const i={trim:!0,...t};return i.trim&&(n=n.trim()),i.camelize&&(n=function(e){return e.replace(/(?:^\w|[A-Z_-]|\b\w)/g,((e,t)=>{let n="";return n=e.replace(/[-_]+/g," "),n=0!==t?n.replace(/[A-Z]/," $&"):n,0===t?n.toUpperCase():n.toLowerCase()})).replace(/\s+/g," ")}(n).replace(/(?:^\w|[A-Z]|\b\w)/g,((e,t)=>0===t?e.toLowerCase():e.toUpperCase())).replace(/\s+/g,"")),n}function m(e){let t="";return e.type&&(t="{type}"),e.scope&&(t=`${t}({scope})`),(e.type||e.scope)&&(t=`${t}: {subject}`),e.body&&(t=`${t}\n\n{body}`),(e.foot||e.issue)&&(t=`${t}\n\n`),e.issue&&(t=`${t}{issue}\n`),e.foot&&(t=`${t}{foot}`),t}function h(t,i={}){let s;const o={logInfo:!1,...i},{wkd:r}=o,a=p(r,{camelize:!1}),c=function(e){return l(e)}(r),h=(d=o.logInfo,function(...e){d&&u(...e)});var d;h("[info] read pkgs pkgjson ");const g=function(t,n={}){let i;try{i=e.readFileSync(t),i=JSON.parse(i)}catch(e){i=n}return i}(`${c}/${a}/package.json`,{}),{version:f,name:w}={version:"0.0.1",...g};let b;h("[info] grep pkgs commits");const y=new RegExp(`${c}/${a}/`,"i");if(b=t.filter((e=>e.file.some((e=>y.test(e))))),o.sinceDate&&h("[info] only since date"),o.ignoreTypes){h("[info] filter types with ignore type");let e=function(e,t={}){let n={splitReg:/[,_;| ]/,...t},i=Array.isArray(e)?e:e.split(n.splitReg);return n.useEmpty||(i=i.filter((e=>e))),i}(o.ignoreTypes,{useEmpty:!0});b=b.filter((t=>!e.some((e=>t.type===e))))}o.latestCount>=1&&b.length>0&&(h("[info] only the latet count"),b=b.slice(0,o.latestCount)),h("[info] render new changlog");const j=new n;return j.data=b,j.option={style:"custom"},j.plugin=[e=>{const{data:t,option:n}=e;let i,s,o,r;i=t.map((t=>{const n={...t};let i,{issue:s}=n;return i="[#{issue}]({repo}/pull/{issue})",s&&s.length>0?(s=s.filter((e=>e)),n.issue=s.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):n.issue="",n})),i=i.map(((t,n)=>{const i={...t},{issue:s}=i;return s.length>0?i.subject=e.writeTpl("{subject}({issue})",i):i.subject=e.writeTpl("{subject}",i),i})),i=i.map(((t,n)=>{const i={...t};let s,o;return s=m(i),i.body.indexOf(i.subject)>=0&&(i.body=""),s=e.writeTpl(s,{...i}),s=s.replace(/\r?\n/gi,"&#10;"),i.inlinebody=s,o='[{commit}]({repo}/commit/{hash} "{inlinebody}")',i.commit=e.writeTpl('[{commit}]({repo}/commit/{hash} "{inlinebody}")',{...i}),i})),s=i.map((t=>e.writeTpl("{commit}|{type}|{subject}",t))).join("\n"),o=function(e,t="l"){let n="";const i=e,s=i.split("|").map((()=>{let e="";switch(t){case"m":case"center":e=":----:";break;case"r":case"right":e="----:";break;default:e=":----"}return e})).join("|");return n=`${i}\n${s}`,n}("commit|type|desciption","l"),r=`${o}\n${s}\n\n`;let a="",c='<a name="{version}"></a>\n# {version}({date})\n### {libname}';return c=`${c}\n{changes}`,i.length>0&&(a=e.writeTpl(c,{date:i[0].date,changes:r}),e.result=a),a}],j.plugin=[e=>{const{data:t,option:n}=e;let i,s;i=t.map((t=>{const n={...t};let i,{issue:s}=n;return i="[#{issue}]({repo}/pull/{issue})",s&&s.length>0?(s=s.filter((e=>e)),n.issue=s.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):n.issue="",n})),i=i.map(((t,n)=>{const i={...t},{issue:s}=i;return s.length>0?i.subject=e.writeTpl("{subject}({issue})",i):i.subject=e.writeTpl("{subject}",i),i})),i=i.map(((t,n)=>{const i={...t};let s,o;return s=m(i),i.body.indexOf(i.subject)>=0&&(i.body=""),s=e.writeTpl(s,{...i}),s=s.replace(/\r?\n/gi,"&#10;"),i.inlinebody=s,o='[{commit}]({repo}/commit/{hash} "{inlinebody}")',i.commit=e.writeTpl('[{commit}]({repo}/commit/{hash} "{inlinebody}")',{...i}),i})),s="- {commit} {subject}",s="- [{commit}]({repo}/commit/{hash}) {subject}",s="- [{commit}]({repo}/commit/{hash}) - {type} - {subject}",s="- [{commit}]({repo}/commit/{hash}) - {type} - {subject}",s="- {commit} - {type} - {subject}",s="- {subject} - {type} - {commit}",s="- {type} - {subject} - {commit}",s="- {type}: {subject} - {commit}";const o=i.map(((t,n)=>e.writeTpl("- {type}: {subject} - {commit}",t))).join("\n");let r='<a name="{version}"></a>\n\n## {libname} {version}({date}) \n{changes}';r='<a name="{version}">\n\n## {libname} {version}({date})</a> \n{changes}';let a="";return i.length>0&&(a=e.writeTpl('<a name="{version}">\n\n## {libname} {version}({date})</a> \n{changes}',{date:i[0].date,changes:o}),e.result=a),a}],s=j.render(),s=j.writeTpl(s,{version:f,libname:w,repo:"https://github.com/ymc-github/js-idea"}),s.trim()}const{log:d}=console;function g(e){return function(...t){e&&d(...t)}}module.exports=async function(t={}){const n={out:"pkgs-cmted.tmp.json",cmtedMsgsLoc:"gitlog-info.shim.tmp.json",cmtedPkgsLoc:"pkgs-cmted.tmp.json",changlogLoc:"CHANGELOG.md",outPkgs:!0,logInfo:!1,logTask:!1,...t},i=g(n.logInfo),s=g(n.logTask);let o,a,l=n.out;s("[task] filter msg for pkg"),s("[task] make changelog with tpl"),i("[info] read cmted msgs"),l=n.cmtedMsgsLoc,c.init(l),o=await c.read([]),i(`[info] src: ${l}`),i("[info] read cmted pkgs"),l=n.cmtedPkgsLoc,c.init(l),a=await c.read([]),i(`[info] src: ${l}`),a=a.map((e=>({loc:e}))),i("[info] write changelog");let u=[];u=a.map((e=>{const t=h(o,{wkd:e.loc});return u.push(t),{loc:e.loc,data:t}})),n.outPkgs&&u.forEach((t=>{let i=t.data;e.writeFileSync(`${t.loc}/${n.changlogLoc}`,i),d(`[info] out: ${t.loc}/${n.changlogLoc}`)})),u=u.filter((e=>e)),u=u.join("\n\n"),l=n.changlogLoc,r.init(l),i(`[info] out: ${l}`),await r.write(u)};
