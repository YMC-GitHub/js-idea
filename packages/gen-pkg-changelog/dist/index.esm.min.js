/**
  * genPkgChangelog v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import"@ymc/run-bash";import"@ymc/render-tpl";import"@ymc/git-commit-msg-read";import{ChangelogStyle as e}from"@ymc/changlog-style";import{changelogfile as t}from"@ymc/changlog-file-io";import{camelize as o}from"@ymc/extend-string";import{jsonstream as n}from"@ymc/json-stream-io";import{basename as i,dirname as s}from"@ymc/mock-path";import{readFileSync as c,writeFileSync as r}from"node:fs";const{log:m}=console;function l(e){let t="";return e.type&&(t="{type}"),e.scope&&(t=`${t}({scope})`),(e.type||e.scope)&&(t=`${t}: {subject}`),e.body&&(t=`${t}\n\n{body}`),(e.foot||e.issue)&&(t=`${t}\n\n`),e.issue&&(t=`${t}{issue}\n`),e.foot&&(t=`${t}{foot}`),t}function a(t,n={}){let r;const a={logInfo:!1,...n},{wkd:p}=a,u=function(e,t={}){let n=i(e);const s={trim:!0,...t};return s.trim&&(n=n.trim()),s.camelize&&(n=o(n)),n}(p,{camelize:!1}),g=function(e){return s(e)}(p),f=(d=a.logInfo,function(...e){d&&m(...e)});var d;f("[info] read pkgs pkgjson ");const h=function(e,t={}){let o;try{o=c(e),o=JSON.parse(o)}catch(e){o=t}return o}(`${g}/${u}/package.json`,{}),{version:y,name:b}={version:"0.0.1",...h};let j;f("[info] grep pkgs commits");const w=new RegExp(`${g}/${u}/`,"i");if(j=t.filter((e=>e.file.some((e=>w.test(e))))),a.sinceDate&&f("[info] only since date"),a.ignoreTypes){f("[info] filter types with ignore type");let e=function(e,t={}){let o={splitReg:/[,_;| ]/,...t},n=Array.isArray(e)?e:e.split(o.splitReg);return o.useEmpty||(n=n.filter((e=>e))),n}(a.ignoreTypes,{useEmpty:!0});j=j.filter((t=>!e.some((e=>t.type===e))))}a.latestCount>=1&&j.length>0&&(f("[info] only the latet count"),j=j.slice(0,a.latestCount)),f("[info] render new changlog");const k=new e;return k.data=j,k.option={style:"custom"},k.plugin=[e=>{const{data:t,option:o}=e;let n,i,s,c;n=t.map((t=>{const o={...t};let n,{issue:i}=o;return n="[#{issue}]({repo}/pull/{issue})",i&&i.length>0?(i=i.filter((e=>e)),o.issue=i.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):o.issue="",o})),n=n.map(((t,o)=>{const n={...t},{issue:i}=n;return i.length>0?n.subject=e.writeTpl("{subject}({issue})",n):n.subject=e.writeTpl("{subject}",n),n})),n=n.map(((t,o)=>{const n={...t};let i,s;return i=l(n),n.body.indexOf(n.subject)>=0&&(n.body=""),i=e.writeTpl(i,{...n}),i=i.replace(/\r?\n/gi,"&#10;"),n.inlinebody=i,s='[{commit}]({repo}/commit/{hash} "{inlinebody}")',n.commit=e.writeTpl('[{commit}]({repo}/commit/{hash} "{inlinebody}")',{...n}),n})),i=n.map((t=>e.writeTpl("{commit}|{type}|{subject}",t))).join("\n"),s=function(e,t="l"){let o="";const n=e,i=n.split("|").map((()=>{let e="";switch(t){case"m":case"center":e=":----:";break;case"r":case"right":e="----:";break;default:e=":----"}return e})).join("|");return o=`${n}\n${i}`,o}("commit|type|desciption","l"),c=`${s}\n${i}\n\n`;let r="",m='<a name="{version}"></a>\n# {version}({date})\n### {libname}';return m=`${m}\n{changes}`,n.length>0&&(r=e.writeTpl(m,{date:n[0].date,changes:c}),e.result=r),r}],k.plugin=[e=>{const{data:t,option:o}=e;let n,i;n=t.map((t=>{const o={...t};let n,{issue:i}=o;return n="[#{issue}]({repo}/pull/{issue})",i&&i.length>0?(i=i.filter((e=>e)),o.issue=i.map((t=>e.writeTpl("[#{issue}]({repo}/pull/{issue})",{issue:t.trim().replace(/^#/,"")}))).join(",")):o.issue="",o})),n=n.map(((t,o)=>{const n={...t},{issue:i}=n;return i.length>0?n.subject=e.writeTpl("{subject}({issue})",n):n.subject=e.writeTpl("{subject}",n),n})),n=n.map(((t,o)=>{const n={...t};let i,s;return i=l(n),n.body.indexOf(n.subject)>=0&&(n.body=""),i=e.writeTpl(i,{...n}),i=i.replace(/\r?\n/gi,"&#10;"),n.inlinebody=i,s='[{commit}]({repo}/commit/{hash} "{inlinebody}")',n.commit=e.writeTpl('[{commit}]({repo}/commit/{hash} "{inlinebody}")',{...n}),n})),i="- {commit} {subject}",i="- [{commit}]({repo}/commit/{hash}) {subject}",i="- [{commit}]({repo}/commit/{hash}) - {type} - {subject}",i="- [{commit}]({repo}/commit/{hash}) - {type} - {subject}",i="- {commit} - {type} - {subject}",i="- {subject} - {type} - {commit}",i="- {type} - {subject} - {commit}",i="- {type}: {subject} - {commit}";const s=n.map(((t,o)=>e.writeTpl("- {type}: {subject} - {commit}",t))).join("\n");let c='<a name="{version}"></a>\n\n## {libname} {version}({date}) \n{changes}';c='<a name="{version}">\n\n## {libname} {version}({date})</a> \n{changes}';let r="";return n.length>0&&(r=e.writeTpl('<a name="{version}">\n\n## {libname} {version}({date})</a> \n{changes}',{date:n[0].date,changes:s}),e.result=r),r}],r=k.render(),r=k.writeTpl(r,{version:y,libname:b,repo:"https://github.com/ymc-github/js-idea"}),r.trim()}const{log:p}=console;function u(e){return function(...t){e&&p(...t)}}async function g(e={}){const o={out:"pkgs-cmted.tmp.json",cmtedMsgsLoc:"gitlog-info.shim.tmp.json",cmtedPkgsLoc:"pkgs-cmted.tmp.json",changlogLoc:"CHANGELOG.md",outPkgs:!0,logInfo:!1,logTask:!1,...e},i=u(o.logInfo),s=u(o.logTask);let c,m,l=o.out;s("[task] filter msg for pkg"),s("[task] make changelog with tpl"),i("[info] read cmted msgs"),l=o.cmtedMsgsLoc,n.init(l),c=await n.read([]),i(`[info] src: ${l}`),i("[info] read cmted pkgs"),l=o.cmtedPkgsLoc,n.init(l),m=await n.read([]),i(`[info] src: ${l}`),m=m.map((e=>({loc:e}))),i("[info] write changelog");let g=[];g=m.map((e=>{const t=a(c,{wkd:e.loc});return g.push(t),{loc:e.loc,data:t}})),o.outPkgs&&g.forEach((e=>{let t=e.data;r(`${e.loc}/${o.changlogLoc}`,t),p(`[info] out: ${e.loc}/${o.changlogLoc}`)})),g=g.filter((e=>e)),g=g.join("\n\n"),l=o.changlogLoc,t.init(l),i(`[info] out: ${l}`),await t.write(g)}export{g as default};
