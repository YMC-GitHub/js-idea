/**
  * getCmtedPkg v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
"use strict";var e=require("node:child_process"),t=require("node:fs");function n(e){return e.split(/\r?\n/).map((e=>e.trim())).filter((e=>e)).join("\n")}const r=(t,r,o)=>new Promise(((i,a)=>{o||(o=r,r=t,t="");const s=((e,t=" ")=>Array.isArray(e)?e.join(t):e)(r);(o.exec?o.exec:e.exec)(`${t=t?`${t} ${s}`:`${s}`}`,o,((e,t,r)=>{const{fixUnreadbleCode:s}=o;if(s){const{iconvDesEncoding:e,iconvSrcEncoding:n}=o;t&&(t=s(t,e,n)),r&&(r=s(r,e,n))}e&&o.exitWhenErr&&a(e),o.noTrimOut||(t=n(t),r=n(r)),o.rejectStderr&&(r&&a(e),i(t)),i({stdout:t,stderr:r})}))})),o={exec:e.exec};
/**
  * jsonStreamIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
class i{constructor(e,t){this.init(e,t)}async read(e={}){const{file:n}=this;let r,o;try{r=t.createReadStream(n.name),o=await(i=r,new Promise(((e,t)=>{let n="";i.on("data",(e=>{n+=e.toString()})).on("end",(()=>{e(n)})).on("error",t)}))),o=JSON.parse(o)}catch(t){o=e}
/**
  * streamIo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
var i;return n.data=o,o}async write(e){const{file:n,option:r}=this;let o,i=e;try{o=t.createWriteStream(n.name),e?n.data=e:i=n.data,await function({stream:e,data:t}){return new Promise(((n,r)=>{e.write(t,"utf-8"),e.end(),e.on("finish",(()=>{n(t)})).on("error",r)}))}({stream:o,data:JSON.stringify(i,null,2)})}catch(e){}}init(e="package.json",t={}){this.file={name:e,data:t},this.option={}}new(...e){return new i(...e)}}const a=new i,{log:s}=console;function c(e){return function(...t){e&&s(...t)}}module.exports=async function(e={}){const t={out:"pkgs-cmted.tmp.json",packageslocReg:/^packages\//,logInfo:!1,logTask:!1,...e},{packageslocReg:n}=t,i=c(t.logInfo);let l;c(t.logTask)("[task] read commited pkgs from gitlog"),i("[info] read commited pkgs"),l=await async function(e,t){const{stdout:n,stderr:o}=await r(e,t);return n}("git ls-tree --full-tree --name-only -r HEAD",o),l=l.split(/\r?\n/).filter((e=>e)),l=await async function(e={}){const t={EOFReg:/\r?\n/,pathSplit:"/",packageslocReg:/^packages\//,files:"",for:"pkg-name",...e};let{files:n}=t;if(!n)return[];n=n.filter((e=>t.packageslocReg.test(e)));const r=t.pathSplit;if("pkg-loc"===t.for.toLowerCase())n=n.map((e=>e.split(r).slice(0,2).join(r))).filter((e=>e));else n=n.map((e=>e.split(r)[1])).filter((e=>e));return n=[...new Set(n)],n}({files:l,for:"pkg-loc",packageslocReg:n}),s(l.join("\n")),i("[info] save commited pkgs");let f=t.out;return a.init(f),await a.write(l),i(`[info] out: ${f}`),l};
