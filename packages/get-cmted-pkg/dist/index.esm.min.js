/**
  * getCmtedPkg v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{exec as t,execOpts as e}from"@ymc/run-bash";import"@ymc/extend-string";import{jsonstream as o}from"@ymc/json-stream-io";const{log:n}=console;function s(t){return function(...e){t&&n(...e)}}async function a(a={}){const i={out:"pkgs-cmted.tmp.json",packageslocReg:/^packages\//,logInfo:!1,logTask:!1,...a},{packageslocReg:r}=i,c=s(i.logInfo);let l;s(i.logTask)("[task] read commited pkgs from gitlog"),c("[info] read commited pkgs"),l=await async function(e,o){const{stdout:n,stderr:s}=await t(e,o);return n}("git ls-tree --full-tree --name-only -r HEAD",e),l=l.split(/\r?\n/).filter((t=>t)),l=await async function(t={}){const e={EOFReg:/\r?\n/,pathSplit:"/",packageslocReg:/^packages\//,files:"",for:"pkg-name",...t};let{files:o}=e;if(!o)return[];o=o.filter((t=>e.packageslocReg.test(t)));const n=e.pathSplit;if("pkg-loc"===e.for.toLowerCase())o=o.map((t=>t.split(n).slice(0,2).join(n))).filter((t=>t));else o=o.map((t=>t.split(n)[1])).filter((t=>t));return o=[...new Set(o)],o}({files:l,for:"pkg-loc",packageslocReg:r}),n(l.join("\n")),c("[info] save commited pkgs");let g=i.out;return o.init(g),await o.write(l),c(`[info] out: ${g}`),l}export{a as default};
