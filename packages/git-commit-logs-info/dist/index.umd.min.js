/**
  * gitCommitLogsInfo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("node:child_process"),require("node:fs")):"function"==typeof define&&define.amd?define(["node:child_process","node:fs"],e):(t="undefined"!=typeof globalThis?globalThis:t||self)["git-commit-logs-info"]=e(t.node_child_process,t.node_fs)}(this,(function(t,e){"use strict";
/**
    * runBash v0.0.3
    * (c) 2018-2022 ymc
    * @license MIT
    */function n(t){return t.split(/\r?\n/).map((t=>t.trim())).filter((t=>t)).join("\n")}const i=(e,i,o)=>new Promise(((r,s)=>{o||(o=i,i=e,e="");const a=((t,e=" ")=>Array.isArray(t)?t.join(e):t)(i);(o.exec?o.exec:t.exec)(`${e=e?`${e} ${a}`:`${a}`}`,o,((t,e,i)=>{const{fixUnreadbleCode:a}=o;if(a){const{iconvDesEncoding:t,iconvSrcEncoding:n}=o;e&&(e=a(e,t,n)),i&&(i=a(i,t,n))}t&&o.exitWhenErr&&s(t),o.noTrimOut||(e=n(e),i=n(i)),o.rejectStderr&&(i&&s(t),r(e)),r({stdout:e,stderr:i})}))})),o={exec:t.exec};
/**
    * jsonStreamIo v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */
class r{constructor(t,e){this.init(t,e)}async read(t={}){const{file:n}=this;let i,o;try{i=e.createReadStream(n.name),o=await(r=i,new Promise(((t,e)=>{let n="";r.on("data",(t=>{n+=t.toString()})).on("end",(()=>{t(n)})).on("error",e)}))),o=JSON.parse(o)}catch(e){o=t}
/**
    * streamIo v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */
var r;return n.data=o,o}async write(t){const{file:n,option:i}=this;let o,r=t;try{o=e.createWriteStream(n.name),t?n.data=t:r=n.data,await function({stream:t,data:e}){return new Promise(((n,i)=>{t.write(e,"utf-8"),t.end(),t.on("finish",(()=>{n(e)})).on("error",i)}))}({stream:o,data:JSON.stringify(r,null,2)})}catch(t){}}init(t="package.json",e={}){this.file={name:t,data:e},this.option={}}new(...t){return new r(...t)}}const s=new r;
/**
    * renderTpl v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */function a(t,e){let n=t;return Object.keys(e).forEach((t=>{const i=e[t];n=n.replace(new RegExp(`{${t}}`,"ig"),i)})),n}function c(t,e){return e?a(t,e):e=>a(t,e)}
/**
    * gitCommitMsgParse v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */function l(t){return void 0!==t}function f(t,e,n){let i,o,r,s;if(e)[r,s]=[t,e];else{const e=t.trim().split(/\r?\n/).map((t=>t.trim().split("\\n"))).flat(1).map((t=>t.trim()));[r]=e,s=e.slice(1).join("\n"),s||(s=r)}const a=function(t=""){let e;const n={body:t,foot:""};let i,o,r,s;e=t.replace(/\\\\n/gi,"\n"),i=function(t){return t.trim().split(/\r?\n/)}(e);for(let t=0;t<i.length;t+=1){const e=i[t];if(!l(o)&&e.match(/^BREAKING CHANGE/i)&&(o=t),!l(r)&&e.match(/^CLOSING ISSUE/i)&&(r=t),!l(s)&&e.match(/^generated by/i)&&(s=t),l(r)&&l(o)&&l(s))break}let a=-1;return l(r)||(r=-1),l(o)||(o=-1),l(s)||(s=-1),a=Math.max(r,o,s),a>=0&&a<=i.length&&(n.foot=i.slice(a).join("\n").trim(),n.body=a>0?i.slice(0,a).join("\n").trim():""),n}(s);return i=function(t,e){const n=/\(.*\):?/gi;if(t.match(n))return t.split(":")[0].replace(n,"");let i=t.split(" ")[0].trim().replace(/\(.*\):?/gi,"").trim();return function(t,e="feat|fix|docs|style|refactor|preform|test|tool|chore|revert"){return n=t,e.split("|").some((t=>t===n));var n}(i,e)||(i=""),i}(r,n),o=function(t=""){const e=t.match(/\(.*\)/gi);let n="";return e&&([n]=e),n=n.replace(/(^\(|\)$)/gi,""),n}(r),r=r.replace(i,"").replace(/\(.*\):?/i,"").trim(),{type:i,scope:o,subject:r,...a}}
/**
    * gitCommitMsgRead v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */function u(t){return t.trim().split(/\r?\n/)}async function g(t,e){const{stdout:n,stderr:o}=await i(t,e);return n}const m=new class{constructor(){this.infojson=[],this.options={},this.status={}}set(t,e){const{infojson:n,status:i}=this;var o,r,s;return i.initeddata||(s={},(o=n)[r=t]||(o[r]=s),i.initeddata=!0),function(t=[],e="subject",n=[]){if(n.length!==t.length)return;const i=t.length;for(let o=0;o<i;o+=1)t[o][`${e}`]=n[o]}(n,t,e),this}getTpl(t,e={}){let n={...e,...this.options};return n.n&&(t=`${t} -n ${n.n}`),t}async getHash(){let t,e,n;return t='git log --pretty=format:"%H" --abbrev-commit',t=this.getTpl(t),e=c(t,{}),n=await g(e,o),n}async getSubject(){let t,e,n;return t='git log --pretty=format:"%s" --abbrev-commit',t=this.getTpl(t),e=c(t,{}),n=await g(e,o),n}async getBody(){let t,e,n;return t='git log --pretty=format:"%b"',t=this.getTpl(t),e=c(t,{}),n=await g(e,o),n}async getDate(){let t,e,n;return t='git log --pretty=format:"%as"',t=this.getTpl(t),e=c(t,{}),n=await g(e,o),n}async getFile(t,e){let n='git show --pretty="" --name-only {commit}';n=this.getTpl(n);const i=[];for(let e=0;e<t.length;e+=1){const n=t[e],o=await r(n);o&&i.push(u(o))}return i;async function r(t){return g(c(e||n,{commit:t}),o)}}async getinfo(){let t,e,n,i,o,r,s;return t=await this.getHash(),t=u(t),e=await this.getSubject(),e=u(e),r='git log -n 1 --pretty=format:"%b" {commit}',n=await this.getFile(t,'git log -n 1 --pretty=format:"%b" {commit}'),n=n.map((t=>t.join("\n"))),o=await this.getDate(),o=u(o),i=await this.getFile(t),s=t.map(((t,r)=>({commit:t.slice(1,10),subject:e,body:n,issue:[""],hash:t,file:i[r],date:o[r]}))),this.infojson=s,s}async parse(){let t=await this.getinfo();return t=t.map(((t,e)=>{let{subject:n,body:i}=t;const o=f(n[e],i[e]);let r=function(t,e=/#\d+/gi){const n=t.match(e);let i=[];return n&&(i=n),i}(o.foot);return{...t,...o,issue:r}})),this.infojson=t,t}filterInfoByFile(t=/.*/i){const{infojson:e}=this;return e.filter((e=>!(!e||!e.file)&&e.file.some((e=>t.test(e)))))}filterSinceLastChanglog(t,e){const n=[];for(let i=0;i<t.length;i+=1){const o=t[i];if(o.commit===e)break;n.push(o)}return n}},{log:h}=console;function p(t){return function(...e){t&&h(...e)}}return async function(t={}){const e={out:"gitlog-info.shim.tmp.json",n:10,logInfo:!1,logTask:!1,...t},n=p(e.logInfo),i=p(e.logTask);let o,r=e.out;i(`[task] update git commited logs to ${r}`),e.n&&(n("[info] read the last gitlog"),m.options.n=e.n);const a=await m.parse();n("[info] store gitlog"),s.init(r),o=await s.read([]);let c=0;a.forEach((t=>{o.some((e=>e.hash===t.hash))||(o.unshift(t),c+=1)})),await s.write(o),n(`[info] out: ${r}`),h(`[info] update count: ${c}`)}}));
