/**
  * gitCommitMsgRead v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("node:child_process");
/**
  * runBash v0.0.3
  * (c) 2018-2022 ymc
  * @license MIT
  */function e(t){return t.split(/\r?\n/).map((t=>t.trim())).filter((t=>t)).join("\n")}const r=(r,i,n)=>new Promise(((o,s)=>{n||(n=i,i=r,r="");const a=((t,e=" ")=>Array.isArray(t)?t.join(e):t)(i);(n.exec?n.exec:t.exec)(`${r=r?`${r} ${a}`:`${a}`}`,n,((t,r,i)=>{const{fixUnreadbleCode:a}=n;if(a){const{iconvDesEncoding:t,iconvSrcEncoding:e}=n;r&&(r=a(r,t,e)),i&&(i=a(i,t,e))}t&&n.exitWhenErr&&s(t),n.noTrimOut||(r=e(r),i=e(i)),n.rejectStderr&&(i&&s(t),o(r)),o({stdout:r,stderr:i})}))})),i={exec:t.exec};
/**
  * renderTpl v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
/**
  * renderTpl v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
function n(t,e){let r=t;return Object.keys(e).forEach((t=>{const i=e[t];r=r.replace(new RegExp(`{${t}}`,"ig"),i)})),r}function o(t,e){return e?n(t,e):e=>n(t,e)}function s(t){return t.trim().split(/\r?\n/)}async function a(t,e){const{stdout:i,stderr:n}=await r(t,e);return i}class c{constructor(){this.infojson=[],this.status={}}set(t,e){const{infojson:r,status:i}=this;var n,o,s;return i.initeddata||(s={},(n=r)[o=t]||(n[o]=s),i.initeddata=!0),function(t=[],e="subject",r=[]){if(r.length!==t.length)return;const i=t.length;for(let n=0;n<i;n+=1)t[n][`${e}`]=r[n]}(r,t,e),this}async getHash(){let t,e,r;return t='git log --pretty=format:"%H" --abbrev-commit',e=o('git log --pretty=format:"%H" --abbrev-commit',{}),r=await a(e,i),r}async getSubject(){let t,e,r;return t='git log --pretty=format:"%s" --abbrev-commit',e=o('git log --pretty=format:"%s" --abbrev-commit',{}),r=await a(e,i),r}async getBody(){let t,e,r;return t='git log --pretty=format:"%b"',e=o('git log --pretty=format:"%b"',{}),r=await a(e,i),r}async getDate(){let t,e,r;return t='git log --pretty=format:"%as"',e=o('git log --pretty=format:"%as"',{}),r=await a(e,i),r}async getFile(t,e){const r=[];for(let e=0;e<t.length;e+=1){const i=t[e],o=await n(i);o&&r.push(s(o))}return r;async function n(t){return a(o(e||'git show --pretty="" --name-only {commit}',{commit:t}),i)}}async getinfo(){let t,e,r,i,n,o;return t=await this.getHash(),t=s(t),e=await this.getSubject(),e=s(e),r=await this.getFile(t,'git log -n 1 --pretty=format:"%b" {commit}'),r=r.map((t=>t.join("\n"))),n=await this.getDate(),n=s(n),i=await this.getFile(t),o=t.map(((t,o)=>({commit:t.slice(1,10),subject:e,body:r,issue:[""],hash:t,file:i[o],date:n[o]}))),this.infojson=o,o}filterInfoByFile(t=/.*/i){const{infojson:e}=this;return e.filter((e=>!(!e||!e.file)&&e.file.some((e=>t.test(e)))))}filterSinceLastChanglog(t,e){const r=[];for(let i=0;i<t.length;i+=1){const n=t[i];if(n.commit===e)break;r.push(n)}return r}}const l=new c;exports.Store=c,exports.store=l;
