/**
  * gitCommitMsgRead v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{exec as t,execOpts as e}from"@ymc/run-bash";import{writeTpl as i}from"@ymc/render-tpl";function r(t){return t.trim().split(/\r?\n/)}async function o(e,i){const{stdout:r,stderr:o}=await t(e,i);return r}class n{constructor(){this.infojson=[],this.status={}}set(t,e){const{infojson:i,status:r}=this;var o,n,a;return r.initeddata||(a={},(o=i)[n=t]||(o[n]=a),r.initeddata=!0),function(t=[],e="subject",i=[]){if(i.length!==t.length)return;const r=t.length;for(let o=0;o<r;o+=1)t[o][`${e}`]=i[o]}(i,t,e),this}async getHash(){let t,r,n;return t='git log --pretty=format:"%H" --abbrev-commit',r=i('git log --pretty=format:"%H" --abbrev-commit',{}),n=await o(r,e),n}async getSubject(){let t,r,n;return t='git log --pretty=format:"%s" --abbrev-commit',r=i('git log --pretty=format:"%s" --abbrev-commit',{}),n=await o(r,e),n}async getBody(){let t,r,n;return t='git log --pretty=format:"%b"',r=i('git log --pretty=format:"%b"',{}),n=await o(r,e),n}async getDate(){let t,r,n;return t='git log --pretty=format:"%as"',r=i('git log --pretty=format:"%as"',{}),n=await o(r,e),n}async getFile(t,n){const a=[];for(let e=0;e<t.length;e+=1){const i=t[e],o=await s(i);o&&a.push(r(o))}return a;async function s(t){return o(i(n||'git show --pretty="" --name-only {commit}',{commit:t}),e)}}async getinfo(){let t,e,i,o,n,a;return t=await this.getHash(),t=r(t),e=await this.getSubject(),e=r(e),i=await this.getFile(t,'git log -n 1 --pretty=format:"%b" {commit}'),i=i.map((t=>t.join("\n"))),n=await this.getDate(),n=r(n),o=await this.getFile(t),a=t.map(((t,r)=>({commit:t.slice(1,10),subject:e,body:i,issue:[""],hash:t,file:o[r],date:n[r]}))),this.infojson=a,a}filterInfoByFile(t=/.*/i){const{infojson:e}=this;return e.filter((e=>!(!e||!e.file)&&e.file.some((e=>t.test(e)))))}filterSinceLastChanglog(t,e){const i=[];for(let r=0;r<t.length;r+=1){const o=t[r];if(o.commit===e)break;i.push(o)}return i}}const a=new n;export{n as Store,a as store};
