/**
  * gitCommitMsgRead v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("node:child_process")):"function"==typeof define&&define.amd?define(["exports","node:child_process"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self)["git-commit-msg-read"]={},t.node_child_process)}(this,(function(t,e){"use strict";
/**
    * runBash v0.0.3
    * (c) 2018-2022 ymc
    * @license MIT
    */function n(t){return t.split(/\r?\n/).map((t=>t.trim())).filter((t=>t)).join("\n")}const i=(t,i,r)=>new Promise(((o,s)=>{r||(r=i,i=t,t="");const c=((t,e=" ")=>Array.isArray(t)?t.join(e):t)(i);(r.exec?r.exec:e.exec)(`${t=t?`${t} ${c}`:`${c}`}`,r,((t,e,i)=>{const{fixUnreadbleCode:c}=r;if(c){const{iconvDesEncoding:t,iconvSrcEncoding:n}=r;e&&(e=c(e,t,n)),i&&(i=c(i,t,n))}t&&r.exitWhenErr&&s(t),r.noTrimOut||(e=n(e),i=n(i)),r.rejectStderr&&(i&&s(t),o(e)),o({stdout:e,stderr:i})}))})),r={exec:e.exec};
/**
    * renderTpl v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */
function o(t,e){let n=t;return Object.keys(e).forEach((t=>{const i=e[t];n=n.replace(new RegExp(`{${t}}`,"ig"),i)})),n}function s(t,e){return e?o(t,e):e=>o(t,e)}
/**
    * gitCommitMsgParse v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */function c(t){return void 0!==t}function a(t,e,n){let i,r,o,s;if(e)[o,s]=[t,e];else{const e=t.trim().split(/\r?\n/).map((t=>t.trim().split("\\n"))).flat(1).map((t=>t.trim()));[o]=e,s=e.slice(1).join("\n"),s||(s=o)}const a=function(t=""){let e;const n={body:t,foot:""};let i,r,o,s;e=t.replace(/\\\\n/gi,"\n"),i=function(t){return t.trim().split(/\r?\n/)}(e);for(let t=0;t<i.length;t+=1){const e=i[t];if(!c(r)&&e.match(/^BREAKING CHANGE/i)&&(r=t),!c(o)&&e.match(/^CLOSING ISSUE/i)&&(o=t),!c(s)&&e.match(/^generated by/i)&&(s=t),c(o)&&c(r)&&c(s))break}let a=-1;return c(o)||(o=-1),c(r)||(r=-1),c(s)||(s=-1),a=Math.max(o,r,s),a>=0&&a<=i.length&&(n.foot=i.slice(a).join("\n").trim(),n.body=a>0?i.slice(0,a).join("\n").trim():""),n}(s);return i=function(t,e){const n=/\(.*\):?/gi;if(t.match(n))return t.split(":")[0].replace(n,"");let i=t.split(" ")[0].trim().replace(/\(.*\):?/gi,"").trim();return function(t,e="feat|fix|docs|style|refactor|preform|test|tool|chore|revert"){return n=t,e.split("|").some((t=>t===n));var n}(i,e)||(i=""),i}(o,n),r=function(t=""){const e=t.match(/\(.*\)/gi);let n="";return e&&([n]=e),n=n.replace(/(^\(|\)$)/gi,""),n}(o),o=o.replace(i,"").replace(/\(.*\):?/i,"").trim(),{type:i,scope:r,subject:o,...a}}function l(t){return t.trim().split(/\r?\n/)}async function f(t,e){const{stdout:n,stderr:r}=await i(t,e);return n}class u{constructor(){this.infojson=[],this.options={},this.status={}}set(t,e){const{infojson:n,status:i}=this;var r,o,s;return i.initeddata||(s={},(r=n)[o=t]||(r[o]=s),i.initeddata=!0),function(t=[],e="subject",n=[]){if(n.length!==t.length)return;const i=t.length;for(let r=0;r<i;r+=1)t[r][`${e}`]=n[r]}(n,t,e),this}getTpl(t,e={}){let n={...e,...this.options};return n.n&&(t=`${t} -n ${n.n}`),t}async getHash(){let t,e,n;return t='git log --pretty=format:"%H" --abbrev-commit',t=this.getTpl(t),e=s(t,{}),n=await f(e,r),n}async getSubject(){let t,e,n;return t='git log --pretty=format:"%s" --abbrev-commit',t=this.getTpl(t),e=s(t,{}),n=await f(e,r),n}async getBody(){let t,e,n;return t='git log --pretty=format:"%b"',t=this.getTpl(t),e=s(t,{}),n=await f(e,r),n}async getDate(){let t,e,n;return t='git log --pretty=format:"%as"',t=this.getTpl(t),e=s(t,{}),n=await f(e,r),n}async getFile(t,e){let n='git show --pretty="" --name-only {commit}';n=this.getTpl(n);const i=[];for(let e=0;e<t.length;e+=1){const n=t[e],r=await o(n);r&&i.push(l(r))}return i;async function o(t){return f(s(e||n,{commit:t}),r)}}async getinfo(){let t,e,n,i,r,o,s;return t=await this.getHash(),t=l(t),e=await this.getSubject(),e=l(e),o='git log -n 1 --pretty=format:"%b" {commit}',n=await this.getFile(t,'git log -n 1 --pretty=format:"%b" {commit}'),n=n.map((t=>t.join("\n"))),r=await this.getDate(),r=l(r),i=await this.getFile(t),s=t.map(((t,o)=>({commit:t.slice(1,10),subject:e,body:n,issue:[""],hash:t,file:i[o],date:r[o]}))),this.infojson=s,s}async parse(){let t=await this.getinfo();return t=t.map(((t,e)=>{let{subject:n,body:i}=t;const r=a(n[e],i[e]);let o=function(t,e=/#\d+/gi){const n=t.match(e);let i=[];return n&&(i=n),i}(r.foot);return{...t,...r,issue:o}})),this.infojson=t,t}filterInfoByFile(t=/.*/i){const{infojson:e}=this;return e.filter((e=>!(!e||!e.file)&&e.file.some((e=>t.test(e)))))}filterSinceLastChanglog(t,e){const n=[];for(let i=0;i<t.length;i+=1){const r=t[i];if(r.commit===e)break;n.push(r)}return n}}const m=new u;t.Store=u,t.store=m,Object.defineProperty(t,"__esModule",{value:!0})}));
