/**
  * gitCommitMsgRead v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("node:child_process")):"function"==typeof define&&define.amd?define(["exports","node:child_process"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self)["git-commit-msg-read"]={},t.node_child_process)}(this,(function(t,e){"use strict";
/**
    * runBash v0.0.3
    * (c) 2018-2022 ymc
    * @license MIT
    */function i(t){return t.split(/\r?\n/).map((t=>t.trim())).filter((t=>t)).join("\n")}const n=(t,n,o)=>new Promise(((r,s)=>{o||(o=n,n=t,t="");const a=((t,e=" ")=>Array.isArray(t)?t.join(e):t)(n);(o.exec?o.exec:e.exec)(`${t=t?`${t} ${a}`:`${a}`}`,o,((t,e,n)=>{const{fixUnreadbleCode:a}=o;if(a){const{iconvDesEncoding:t,iconvSrcEncoding:i}=o;e&&(e=a(e,t,i)),n&&(n=a(n,t,i))}t&&o.exitWhenErr&&s(t),o.noTrimOut||(e=i(e),n=i(n)),o.rejectStderr&&(n&&s(t),r(e)),r({stdout:e,stderr:n})}))})),o={exec:e.exec};
/**
    * renderTpl v1.0.0
    * (c) 2018-2022 ymc
    * @license MIT
    */
function r(t,e){let i=t;return Object.keys(e).forEach((t=>{const n=e[t];i=i.replace(new RegExp(`{${t}}`,"ig"),n)})),i}function s(t,e){return e?r(t,e):e=>r(t,e)}function a(t){return t.trim().split(/\r?\n/)}async function c(t,e){const{stdout:i,stderr:o}=await n(t,e);return i}class l{constructor(){this.infojson=[],this.status={}}set(t,e){const{infojson:i,status:n}=this;var o,r,s;return n.initeddata||(s={},(o=i)[r=t]||(o[r]=s),n.initeddata=!0),function(t=[],e="subject",i=[]){if(i.length!==t.length)return;const n=t.length;for(let o=0;o<n;o+=1)t[o][`${e}`]=i[o]}(i,t,e),this}async getHash(){let t,e,i;return t='git log --pretty=format:"%H" --abbrev-commit',e=s('git log --pretty=format:"%H" --abbrev-commit',{}),i=await c(e,o),i}async getSubject(){let t,e,i;return t='git log --pretty=format:"%s" --abbrev-commit',e=s('git log --pretty=format:"%s" --abbrev-commit',{}),i=await c(e,o),i}async getBody(){let t,e,i;return t='git log --pretty=format:"%b"',e=s('git log --pretty=format:"%b"',{}),i=await c(e,o),i}async getDate(){let t,e,i;return t='git log --pretty=format:"%as"',e=s('git log --pretty=format:"%as"',{}),i=await c(e,o),i}async getFile(t,e){const i=[];for(let e=0;e<t.length;e+=1){const o=t[e],r=await n(o);r&&i.push(a(r))}return i;async function n(t){return c(s(e||'git show --pretty="" --name-only {commit}',{commit:t}),o)}}async getinfo(){let t,e,i,n,o,r;return t=await this.getHash(),t=a(t),e=await this.getSubject(),e=a(e),i=await this.getFile(t,'git log -n 1 --pretty=format:"%b" {commit}'),i=i.map((t=>t.join("\n"))),o=await this.getDate(),o=a(o),n=await this.getFile(t),r=t.map(((t,r)=>({commit:t.slice(1,10),subject:e,body:i,issue:[""],hash:t,file:n[r],date:o[r]}))),this.infojson=r,r}filterInfoByFile(t=/.*/i){const{infojson:e}=this;return e.filter((e=>!(!e||!e.file)&&e.file.some((e=>t.test(e)))))}filterSinceLastChanglog(t,e){const i=[];for(let n=0;n<t.length;n+=1){const o=t[n];if(o.commit===e)break;i.push(o)}return i}}const f=new l;t.Store=l,t.store=f,Object.defineProperty(t,"__esModule",{value:!0})}));
