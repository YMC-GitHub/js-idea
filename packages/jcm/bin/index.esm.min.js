#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
const s=(s,e="")=>{const n=new RegExp(` *${s}:.*`,"ig"),t=e.match(n);return t?t[0].replace(new RegExp(` *${s}:`,"i"),""):""},{log:e}=console,n=(s={})=>{e("hello ns")},t=new class{constructor(){}entrys(s){return s?(this.context=s,this):this.context}bind(s="",e=(()=>{}),n=""){const t=this.entrys();s.split("|").forEach((s=>{let o;if("call"===n.toLowerCase())o=e(s);t[s]=o}))}};t.entrys(n).bind("eslint|jest|babel|tsc",((s="add")=>(n={})=>{e(`hello ${s}`)}),"call");const o=((s="ns")=>`cnf gen for ymc repo\n  mgnt .ymcrc.json file\n  usage:ns [subcmd] [option]\n    ${s} -h\n    ${s} -v\n\n  subcmd:add|del|get|put|cls|log\n    add - add des file\n    del - del des file\n    get - get des file\n  option:\n    -n,--name cnf file name\n    -w,--wkd use working dir\n    -u,--usd use user dir\n    -c,--crd use current dir\n    -h,--help get help\n    -v,--version get version\n`)("jcm"),i=((e="npm-bin",n="1.0.0",t="")=>{let o={};return o={...o,version:n,ns:e,autoSubCmd:s("subcmd",t),autoSubNs:s("subns",t)},o})("jcm","1.0.0",o);n.usage=o,n.option=i,n.enableZeroOption=!0,n.notOnlyFlags=!0;const l=s=>!!["true",!0].includes(s)||!["false",!1].includes(s)&&(Number(s)?Number(s):s),{log:r}=console;const u=new class{constructor(){this.option={helpmsg:"usage:ns option",argvIndexS:2,enbaleSubCmd:!1,subcmd:"",allowAutoSubCmd:!0,autoSubCmd:"",version:"1.0.0",ns:"ycs",enbaleSubNs:!1,subns:"",allowAutoSubNs:!0,autoSubNs:""}}ns(s="ns"){return this.option.ns=s,this}version(s="1.0.0"){return this.option.version=s,this}entry(s={}){return this.option.entrys=s,this}autosubcmd(s=""){return this.option.autoSubCmd=s,this}autosubns(s=""){return this.option.autoSubNs=s,this}nanoparse(s=(()=>{})){return this.option.nanoparse=s,this}run(s){let{entrys:e,helpmsg:n,argvIndexS:t,enbaleSubCmd:o,subcmd:i,allowAutoSubCmd:u,autoSubCmd:a,version:c,ns:d,enbaleSubNs:p,subns:b,allowAutoSubNs:h,autoSubNs:g}=this.option;!p&&h&&g&&(g=Array.isArray(g)?g:g.split("|"),p=g.includes(s[t])),p&&(b=s[t],t++,n=n.replace(/option$/,"subns option")),!o&&u&&a&&(a=Array.isArray(a)?a:a.split("|"),o=a.includes(s[t])),o&&(i=s[t],t++,n=n.replace(/option$/,"subcmd option"));let f=e;if(n=e.usage,p&&b){if(!f[b])return r(`${n}`),void r(`todo:subns:${b}`);n=f[b].usage?f[b].usage:n,c=f[b].version?f[b].version:c,f=f[b]?f[b]:()=>{}}if(o&&i){if(!f[i])return r(`${n}`),void r(`todo:subcmd:${i}`);n=f[i].usage?f[i].usage:n,c=f[i].version?f[i].version:c,f=f[i]?f[i]:()=>{}}let m=s.length<=t;if(e.enableZeroOption&&(m=s.length<t),f.enableZeroOption&&(m=s.length<t),m)return r(`${n}`),void r("error:invalid argv length");const v=function(s){let e=[],n=s;const t=[];s.includes("--")&&(e=s.slice(s.indexOf("--")+1),n=s.slice(0,s.indexOf("--")));const o=[];for(let s=0;s<n.length;s++){const e=n[s-1],i=n[s],l=n[s+1],r=l&&!/^--.+/.test(l)&&!/^-.+/.test(l),u=s=>{o.push([s,!r||l])};if(/^--.+=/.test(i)||/^-.=/.test(i))o.push(i.split("="));else if(/^-[^-].*/.test(i)){let s=i;if(s.includes("=")){const e=s.indexOf("=");o.push([s.slice(e-1,e),s.slice(e+1,e+2)]),s=s.slice(0,e-1)+s.slice(e+2)}for(const e of s.slice(1).split("").slice(0,-1))o.push([e,!0]);u(s[s.length-1])}else if(/^--.+/.test(i)||/^-.+/.test(i))u(i);else{let s=o.find((s=>s[0]===e));if(!s&&/^-./.test(e)){const n=e[e.length-1];s=o.find((s=>s[0]===n))}s||t.push(i)}}const i={};for(const s of o){let e=s[0].replace(/^-{1,2}/g,""),n=s[1];e.startsWith("no-")&&[void 0,!0].includes(n)&&(e=e.slice(3),n=!1),i[e]=l(n)}return{flags:i,_:t.map((s=>l(s))),extras:e.map((s=>l(s)))}}(s.slice(t)),S=v.flags;if((S.debugArgs||S.da)&&r(v),S.version||S.v)r(`${d} version:${c}`);else{if(!S.help&&!S.h)return e.notOnlyFlags||f.notOnlyFlags?f(v):f(S);r(`${n}`)}}};((s={})=>e=>(s.option&&(e.option={...e.option,...s.option}),"version,ns,autoSubCmd,autoSubNs".split(",").forEach((n=>{s[n]&&(e.option[n]=s[n])})),e.entry(s),e))(n)(u),u.run(process.argv);
