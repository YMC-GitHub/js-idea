#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
#!/usr/bin/env node
/**
  * jcm v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";const e=(e,n="")=>{const s=new RegExp(` *${e}:.*`,"ig"),t=n.match(s);return t?t[0].replace(new RegExp(` *${e}:`,"i"),""):""},{log:n}=console,s=(e={})=>{n("hello ns")},t=new class{constructor(){}entrys(e){return e?(this.context=e,this):this.context}bind(e="",n=(()=>{}),s=""){const t=this.entrys();e.split("|").forEach((e=>{let o;if("call"===s.toLowerCase())o=n(e);t[e]=o}))}};t.entrys(s).bind("eslint|jest|babel|tsc",((e="add")=>(s={})=>{n(`hello ${e}`)}),"call");const o=((e="ns")=>`cnf gen for ymc repo\n  mgnt .ymcrc.json file\n  usage:ns [subcmd] [option]\n    ${e} -h\n    ${e} -v\n\n  subcmd:add|del|get|put|cls|log\n    add - add des file\n    del - del des file\n    get - get des file\n  option:\n    -n,--name cnf file name\n    -w,--wkd use working dir\n    -u,--usd use user dir\n    -c,--crd use current dir\n    -h,--help get help\n    -v,--version get version\n`)("jcm"),i=((n="npm-bin",s="1.0.0",t="")=>{let o={};return o={...o,version:s,ns:n,autoSubCmd:e("subcmd",t),autoSubNs:e("subns",t)},o})("jcm","1.0.0",o);s.usage=o,s.option=i,s.enableZeroOption=!0,s.notOnlyFlags=!0;const l=e=>!!["true",!0].includes(e)||!["false",!1].includes(e)&&(Number(e)?Number(e):e),{log:r}=console;const u=new class{constructor(){this.option={helpmsg:"usage:ns option",argvIndexS:2,enbaleSubCmd:!1,subcmd:"",allowAutoSubCmd:!0,autoSubCmd:"",version:"1.0.0",ns:"ycs",enbaleSubNs:!1,subns:"",allowAutoSubNs:!0,autoSubNs:""}}ns(e="ns"){return this.option.ns=e,this}version(e="1.0.0"){return this.option.version=e,this}entry(e={}){return this.option.entrys=e,this}autosubcmd(e=""){return this.option.autoSubCmd=e,this}autosubns(e=""){return this.option.autoSubNs=e,this}nanoparse(e=(()=>{})){return this.option.nanoparse=e,this}run(e){let{entrys:n,helpmsg:s,argvIndexS:t,enbaleSubCmd:o,subcmd:i,allowAutoSubCmd:u,autoSubCmd:c,version:a,ns:d,enbaleSubNs:p,subns:b,allowAutoSubNs:f,autoSubNs:h}=this.option;!p&&f&&h&&(h=Array.isArray(h)?h:h.split("|"),p=h.includes(e[t])),p&&(b=e[t],t++,s=s.replace(/option$/,"subns option")),!o&&u&&c&&(c=Array.isArray(c)?c:c.split("|"),o=c.includes(e[t])),o&&(i=e[t],t++,s=s.replace(/option$/,"subcmd option"));let g=n;if(s=n.usage,p&&b){if(!g[b])return r(`${s}`),void r(`todo:subns:${b}`);s=g[b].usage?g[b].usage:s,a=g[b].version?g[b].version:a,g=g[b]?g[b]:()=>{}}if(o&&i){if(!g[i])return r(`${s}`),void r(`todo:subcmd:${i}`);s=g[i].usage?g[i].usage:s,a=g[i].version?g[i].version:a,g=g[i]?g[i]:()=>{}}let m=e.length<=t;if(n.enableZeroOption&&(m=e.length<t),g.enableZeroOption&&(m=e.length<t),m)return r(`${s}`),void r("error:invalid argv length");const v=function(e){let n=[],s=e;const t=[];e.includes("--")&&(n=e.slice(e.indexOf("--")+1),s=e.slice(0,e.indexOf("--")));const o=[];for(let e=0;e<s.length;e++){const n=s[e-1],i=s[e],l=s[e+1],r=l&&!/^--.+/.test(l)&&!/^-.+/.test(l),u=e=>{o.push([e,!r||l])};if(/^--.+=/.test(i)||/^-.=/.test(i))o.push(i.split("="));else if(/^-[^-].*/.test(i)){let e=i;if(e.includes("=")){const n=e.indexOf("=");o.push([e.slice(n-1,n),e.slice(n+1,n+2)]),e=e.slice(0,n-1)+e.slice(n+2)}for(const n of e.slice(1).split("").slice(0,-1))o.push([n,!0]);u(e[e.length-1])}else if(/^--.+/.test(i)||/^-.+/.test(i))u(i);else{let e=o.find((e=>e[0]===n));if(!e&&/^-./.test(n)){const s=n[n.length-1];e=o.find((e=>e[0]===s))}e||t.push(i)}}const i={};for(const e of o){let n=e[0].replace(/^-{1,2}/g,""),s=e[1];n.startsWith("no-")&&[void 0,!0].includes(s)&&(n=n.slice(3),s=!1),i[n]=l(s)}return{flags:i,_:t.map((e=>l(e))),extras:n.map((e=>l(e)))}}(e.slice(t)),S=v.flags;if((S.debugArgs||S.da)&&r(v),S.version||S.v)r(`${d} version:${a}`);else{if(!S.help&&!S.h)return n.notOnlyFlags||g.notOnlyFlags?g(v):g(S);r(`${s}`)}}};((e={})=>n=>(e.option&&(n.option={...n.option,...e.option}),"version,ns,autoSubCmd,autoSubNs".split(",").forEach((s=>{e[s]&&(n.option[s]=e[s])})),n.entry(e),n))(s)(u),u.run(process.argv)}));
