/**
  * limitAsyncHandle v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
const{log:t}=console;class s{constructor(t){this.init(t)}init(t){return this._max=t,this._count=0,this._taskQueue=[],this._debug=!1,this._cb=null,this}call(t,...s){return new Promise(((i,e)=>{const h=this._createTask(t,s,i,e);this._count>=this._max?this._taskQueue.push(h):h()}))}_createTask(t,s,i,e){return()=>{t(...s).then(i).catch(e).finally((()=>{this._next()})),this._nextTick()}}_next(){if(this._count-=1,this._taskQueue.length){this._taskQueue.shift()()}else this._debug&&t("task count = ",this._count),this._cb&&this._cb()}_nextTick(){this._count+=1,this._debug&&t("task count = ",this._count)}}const i=new s;export{s as LimitAsyncHandle,i as limitAsyncHandle};
