/**
  * linPkgFile v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{exec as t}from"@ymc/run-bash";export{exec,execOpts}from"@ymc/run-bash";import{camelize as n}from"@ymc/extend-string";import{jsonstream as o}from"@ymc/json-stream-io";export{jsonstream}from"@ymc/json-stream-io";const{log:e}=console;function i(t,o={}){let e=function(t){const n=t.split(/\/?\\|\//);return n[n.length-1]}(t);const i={trim:!0,...o};return i.trim&&(e=e.trim()),i.camelize&&(e=n(e)),e}function r(t){return function(t,n="/"){const o=t.split(/\/?\\|\//);return o.slice(0,o.length-1).join(n)}(t)}function s(t,n="done",o="fail"){let e=o;return t&&(e=n),e}async function c(n,o){e(`[info] run cmd: ${n}`);const{stderr:i,stdout:r}=await t(n,o);let c;return i&&e(i),e(r),c=""===i?"passing":"fail",e(`[info] lint files ${c}`),s(!0,c)}function a(t,n,o,e){return e.some((n=>n.name===t))?e.forEach((e=>{e.name===t&&(e[n]=o)})):e.push({name:t,[`${n}`]:o}),e}async function m(t={}){const n={key:"lin_state",state:"todo",storeAt:"pkgs-info.json",...t};let i=n.pkgLoc;e("[info] set lint state in store"),o.init(`${n.pkgLoc}/package.json`);const r=await o.read({});i=n.storeAt,o.init(`${i}`);const s=await o.read([]);a(r.name,n.key,n.state,s),await o.write(s),e(`[info] out: ${i}`)}export{s as getFailOrDone,i as getLibNameFromPath,r as getPackagesLocFromPath,a as putPkgsInfo,c as runeslint,m as setLinState};
