/**
  * nanoParse v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
"use strict";function s(s){return!!["true",!0].includes(s)||!["false",!1].includes(s)&&(Number(s)?Number(s):s)}module.exports=function(e){const t=Array.isArray(e)?e:e.split(/ +/);let i=[],l=t;const n=[];t.includes("--")&&(i=t.slice(t.indexOf("--")+1),l=t.slice(0,t.indexOf("--")));const c=[];for(let s=0;s<l.length;s++){const e=l[s-1],t=l[s],i=l[s+1],o=i&&!/^--.+/.test(i)&&!/^-.+/.test(i),f=s=>{c.push([s,!o||i])};if(/^--.+=/.test(t)||/^-.=/.test(t))c.push(t.split("="));else if(/^-[^-].*/.test(t)){let s=t;if(s.includes("=")){const e=s.indexOf("=");c.push([s.slice(e-1,e),s.slice(e+1,e+2)]),s=s.slice(0,e-1)+s.slice(e+2)}const e=s.slice(1).split("").slice(0,-1);for(const s of e)c.push([s,!0]);f(s[s.length-1])}else if(/^--.+/.test(t)||/^-.+/.test(t))f(t);else{let s=c.find((s=>s[0]===e));if(!s&&/^-./.test(e)){const t=e[e.length-1];s=c.find((s=>s[0]===t))}s||n.push(t)}}const o={};for(const e of c){let t=e[0].replace(/^-{1,2}/g,""),i=e[1];t.startsWith("no-")&&[void 0,!0].includes(i)&&(t=t.slice(3),i=!1),o[t]=s(i)}return{flags:o,_:n.map((e=>s(e))),extras:i.map((e=>s(e)))}};
