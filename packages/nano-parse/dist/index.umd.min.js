/**
  * nanoParse v0.0.1
  * (c) 2018-2022 ymc
  * @license MIT
  */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self)["nano-parse"]=t()}(this,(function(){"use strict";function e(e){return!!["true",!0].includes(e)||!["false",!1].includes(e)&&(Number(e)?Number(e):e)}return function(t){const s=Array.isArray(t)?t:t.split(/ +/);let n=[],i=s;const l=[];s.includes("--")&&(n=s.slice(s.indexOf("--")+1),i=s.slice(0,s.indexOf("--")));const o=[];for(let e=0;e<i.length;e++){const t=i[e-1],s=i[e],n=i[e+1],c=n&&!/^--.+/.test(n)&&!/^-.+/.test(n),f=e=>{o.push([e,!c||n])};if(/^--.+=/.test(s)||/^-.=/.test(s))o.push(s.split("="));else if(/^-[^-].*/.test(s)){let e=s;if(e.includes("=")){const t=e.indexOf("=");o.push([e.slice(t-1,t),e.slice(t+1,t+2)]),e=e.slice(0,t-1)+e.slice(t+2)}const t=e.slice(1).split("").slice(0,-1);for(const e of t)o.push([e,!0]);f(e[e.length-1])}else if(/^--.+/.test(s)||/^-.+/.test(s))f(s);else{let e=o.find((e=>e[0]===t));if(!e&&/^-./.test(t)){const s=t[t.length-1];e=o.find((e=>e[0]===s))}e||l.push(s)}}const c={};for(const t of o){let s=t[0].replace(/^-{1,2}/g,""),n=t[1];s.startsWith("no-")&&[void 0,!0].includes(n)&&(s=s.slice(3),n=!1),c[s]=e(n)}return{flags:c,_:l.map((t=>e(t))),extras:n.map((t=>e(t)))}}}));
