/**
  * pkgsInfo v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{camelize as t}from"@ymc/extend-string";import{existsSync as n,readdirSync as a,statSync as e}from"node:fs";import{jsonstream as i}from"@ymc/json-stream-io";import o from"@ymc/chain-task";const{log:s}=console;async function c(a={}){const o={wkd:"./private-pkgs/noop",...a},s=function(n,a={}){let e=function(t){const n=t.split(/\/?\\|\//);return n[n.length-1]}(n);const i={trim:!0,...a};return i.trim&&(e=e.trim()),i.camelize&&(e=t(e)),e}(o.wkd),c=function(t,n="/"){const a=t.split(/\/?\\|\//);return a.slice(0,a.length-1).join(n)}(o.wkd);const r=`${c}/${s}/package.json`;i.init(r);const m=await i.read({}),{name:p,description:f}=m;let w=[],l=[];return[`${c}/${s}/package.json`,`${c}/${s}/src/index.js`].filter((t=>n(t))).forEach((t=>{const{modifiedAt:n,createdAt:a}=function(t){const n=e(t),{birthtime:a,mtime:i,ctime:o}=n;let s=[i,o];return s=s.sort(((t,n)=>new Date(n)-new Date(t))),{modifiedAt:s[0],createdAt:a}}(t);w.push(n),l.push(a)})),w=w.sort(((t,n)=>new Date(n)-new Date(t))),l=l.sort(((t,n)=>new Date(t)-new Date(n))),[w]=w,[l]=l,{name:p,description:f,created_at:l,modified_at:w,loc:r}}async function r(t={}){const n={packagesLoc:["packages"],split:",",...t};let i=(Array.isArray(n.packagesLoc)?n.packagesLoc:n.packagesLoc.split(n.split)).map((t=>a(t).map((n=>({wkd:`${t}/${n}`,libname:n,packagesLoc:t}))))).flat(1/0);return i=i.filter((t=>e(t.wkd).isDirectory())),i}function m(t,n,a,e){return e.some((n=>n.name===t))?e.forEach((e=>{e.name===t&&(e[n]=a)})):e.push({name:t,[`${n}`]:a}),e}function p(t,n){const a={};return t.forEach((t=>{const{name:n}=t;a[n]=t})),n.forEach((t=>{const{name:n}=t;a[n]?a[n]={...a[n],...t}:a[n]=t})),Object.values(a)}async function f(t={}){let n,a,e,m,f;n=await r(t),a=n.map((t=>async()=>await c(t))),e=await o(a),m=t.storeAt?t.storeAt:"pkgs-info.json",i.init(m),f=await i.read([]);const w=p(f,e);await i.write(w),s(`[info] out: ${m}`)}async function w(t={}){let n,a,e,m,f;n=await r(t),a=n.map((t=>async()=>await c(t))),e=await o(a),m=t.storeAt?t.storeAt:"pkgs-info.json",i.init(m),f=await i.read([]);const w=p(e,f);await i.write(w),s(`[info] out: ${m}`)}async function l(t={}){let n,a,e;e=t.storeAt?t.storeAt:"pkgs-info.json",i.init(e),a=await i.read([]),n=a.map((t=>async()=>{i.init(t.loc);let n=await i.read({});n.description=t.description,await i.write(n),n=null})),s(`[info] out: ${e}`),await o(n)}export{w as codePkgsInfo,f as pullPkgsInfo,l as pushPkgsInfo,m as putPkgsInfo};
