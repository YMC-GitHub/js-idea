/**
  * promiseAll v1.0.0
  * (c) 2018-2022 ymc
  * @license MIT
  */
import{LimitAsyncHandle as e}from"@ymc/limit-async-handle";import{kindOf as n}from"@ymc/kind-of";function t(t,o){return new Promise(((r,i)=>{const l=o||t.length,a=new e(l),c=[],f=e=>{let o=t[e];return"asyncfunction"===n(o)?o=o():"function"===n(o)&&(o=Promise.resolve(o())),o.then((n=>{a._debug?c[e]={index:e,data:n,state:"ok"}:c[e]=n}),(n=>{a._debug?c[e]={index:e,state:"no",error:n}:c[e]=n})).finally((()=>{a._cb=()=>{
//! this._taskQueue.length && this._count===0
0===a._count&&r(c)}}))};for(let e=0;e<t.length;e+=1)a.call(f,e)}))}export{t as default};
